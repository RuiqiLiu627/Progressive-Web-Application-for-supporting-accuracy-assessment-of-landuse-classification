/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';


clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);


self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
    
  }
});






const cacheName = "index-cache-v1"; 
self.addEventListener("install", async (e) => {
    console.log("Service Worker start install.");
  const cache = await caches.open(cacheName); 
    cache.addAll([ // 
        "./index.html",
        "/classes.csv",
        "/karlsruhe/12/2143/1406.png",
        "/karlsruhe/12/2143/1407.png",
        "/karlsruhe/11/1071/703.png",
        "/karlsruhe/10/535/351.png",
        "/karlsruhe/9/267/175.png",
        "/karlsruhe/8/133/87.png",
        "/karlsruhe/7/66/43.png",
    ]);
    self.skipWaiting(); // 
});


self.addEventListener("fetch", (e) => {
    console.log("interceptor user fetch");
    const req = e.request; // 获取请求对象
    	 e.respondWith(getResponse(req));		

   	
    

    async function getResponse(req) {
        let response = null;
        try {
            response = await fetch(req); 
            console.log("net ok");
        } catch(err) { // 如果网络异常
            console.log("net fail.");
            const cache = await caches.open(cacheName); 
            const str=req.url.replace(/[^0-9]/ig, '')
           	if(str==1221431406){
            response = await cache.match('/karlsruhe/'+str.substring(0,2)+'/2143/1406.png'); 
            console.log(response,'response')
     				}
           	 if(str==1221431407){
            response = await cache.match('/karlsruhe/'+str.substring(0,2)+'/2143/1407.png'); 
            console.log(response,'response')
     				}
           	else if(str==111071703){
            response = await cache.match('/karlsruhe/'+str.substring(0,2)+'/1071/703.png'); 
            console.log(response,'response')
     				}
           	else if(str==10535351){
            response = await cache.match('/karlsruhe/'+str.substring(0,2)+'/535/351.png'); 
            console.log(response,'response')
     				}
           	 	else if(str==9267175){
            response = await cache.match('/karlsruhe/'+str.substring(0,1)+'/267/175.png'); 
            console.log(response,'response')
     				}
           	 	 	else if(str==813387){
            response = await cache.match('/karlsruhe/'+str.substring(0,1)+'/133/87.png'); 
            console.log(response,'response')
     				}
           	 	 	 	else if(str==76653){
            response = await cache.match('/karlsruhe/'+str.substring(0,1)+'/66/53.png'); 
            console.log(response,'response')
     				}
        }
        return response;
    }

});